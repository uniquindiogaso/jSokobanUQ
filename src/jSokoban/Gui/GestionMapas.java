/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jSokoban.Gui;

import jSokoban.TableroControlador;
import java.io.File;

/**
 *
 * @author gusta
 */
public class GestionMapas extends javax.swing.JFrame {

    /**
     * Creates new form GestionMapas
     */
    public GestionMapas() {
        initComponents();
        comprobarMapas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cbMapasDisponibles = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        jLabel1.setText("Mapas Disponibles");

        cbMapasDisponibles.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        jLabel2.setText("Modificar");

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        jLabel3.setText("Cargar Mapa");

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        jLabel4.setText("Crear Mapa");

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        jLabel5.setText("Eliminar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbMapasDisponibles, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5))
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbMapasDisponibles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addContainerGap(157, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionMapas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionMapas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionMapas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionMapas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionMapas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbMapasDisponibles;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * @return
     */
    public static String[] mapasDisponibles() {
        String[] mapas = null;
        File carpetaMapas = new File(TableroControlador.PATH_MAPAS);
        if (carpetaMapas.exists()) {
            File[] archivosMapa = carpetaMapas.listFiles();
            mapas = new String[archivosMapa.length];
            for (int i = 0; i < mapas.length; i++) {
                if (archivosMapa[i].isFile()) {
                    mapas[i] = archivosMapa[i].getName().replace(".txt", "");
                }
            }

        } else {
            //Lanzar Excepcion
        }

        return mapas;
    }

    
    public static String[] partidasGuardadas() {
        String[] partidas = null;
        File carpetaPartidas = new File(TableroControlador.PATH_PARTIDAS);
        if (carpetaPartidas.exists()) {
            File[] archivosPartida = carpetaPartidas.listFiles();
            partidas = new String[archivosPartida.length];
            for (int i = 0; i < partidas.length; i++) {
                if (archivosPartida[i].isFile()) {
                    partidas[i] = archivosPartida[i].getName().replace(".txt", "");
                }
            }

        } else {
            //Lanzar Excepcion
        }

        return partidas;
    }
    
    /**
     * Identifica los mapas que se encuentras instalados
     */
    private void comprobarMapas() {
        //Borrar Listado de Mapas que se tienen para evitar repetidos
        cbMapasDisponibles.removeAll();

        String[] mapasDisponibles = mapasDisponibles();
        for (String mapaDisponible : mapasDisponibles) {
            cbMapasDisponibles.addItem(mapaDisponible);
        }
        
    }

    /**
     * Realiza conteno de mapas instalados en el juego
     *
     * @return cantidad de mapas encontrados
     */
    public static int numMapas() {
        int res = 0;
        File carpetaMapas = new File(TableroControlador.PATH_MAPAS);
        if (carpetaMapas.exists()) {
            File[] mapas = carpetaMapas.listFiles();
            for (File mapa : mapas) {
                if (mapa.isFile()) {
                    res++;
                }
            }

        } else {
            //Lanzar Excepcion
        }
        return res;
    }

}
