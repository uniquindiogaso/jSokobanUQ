package jSokoban.Gui;

import jSokoban.ArchivoControlador;
import jSokoban.TableroControlador;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 * Interfaz grafica para la gestion de partidas
 *
 * @since 27-05-2016
 * @version 0.9
 * @author alejo
 * @author gaso
 */
public class PrepararPartida extends javax.swing.JFrame {

    Partida ventanaJuego;
    private JLabel imagenFondo;

    /**
     * Constructor que inicializa la interfaz grafica
     */
    public PrepararPartida() {
        initComponents();
        setResizable(false);
        setSize(728, 645);
        asignarFondo();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bCargarPartida = new javax.swing.JLabel();
        bRegresar = new javax.swing.JLabel();
        bNuevaPartida = new javax.swing.JLabel();
        bPartidaAleatoria = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        bCargarPartida.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        bCargarPartida.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jSokoban/Imagenes/Menu/btnCargarPart.png"))); // NOI18N
        bCargarPartida.setToolTipText("Cargar Partida");
        bCargarPartida.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bCargarPartidaMouseClicked(evt);
            }
        });

        bRegresar.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        bRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jSokoban/Imagenes/Menu/btnRegresar.png"))); // NOI18N
        bRegresar.setToolTipText("Regresar");
        bRegresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bRegresarMouseClicked(evt);
            }
        });

        bNuevaPartida.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        bNuevaPartida.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jSokoban/Imagenes/Menu/btnNueva.png"))); // NOI18N
        bNuevaPartida.setToolTipText("Partida Nueva");
        bNuevaPartida.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bNuevaPartidaMouseClicked(evt);
            }
        });

        bPartidaAleatoria.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        bPartidaAleatoria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jSokoban/Imagenes/Menu/btnAleatoria.png"))); // NOI18N
        bPartidaAleatoria.setToolTipText("Partida Aleatoria");
        bPartidaAleatoria.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bPartidaAleatoriaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(250, 250, 250)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(bRegresar))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(bPartidaAleatoria)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bCargarPartida)
                            .addComponent(bNuevaPartida, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap(272, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(230, Short.MAX_VALUE)
                .addComponent(bNuevaPartida)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bPartidaAleatoria)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bCargarPartida)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bRegresar)
                .addGap(173, 173, 173))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bNuevaPartidaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bNuevaPartidaMouseClicked
        cargarNuevaPartida();
    }//GEN-LAST:event_bNuevaPartidaMouseClicked

    private void bPartidaAleatoriaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bPartidaAleatoriaMouseClicked
        cargarMapaAleatorio();
    }//GEN-LAST:event_bPartidaAleatoriaMouseClicked

    private void bCargarPartidaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bCargarPartidaMouseClicked
        cargarPartidaGuardada();
    }//GEN-LAST:event_bCargarPartidaMouseClicked

    private void bRegresarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bRegresarMouseClicked
        regresarMenu();
    }//GEN-LAST:event_bRegresarMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrepararPartida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrepararPartida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrepararPartida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrepararPartida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrepararPartida().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bCargarPartida;
    private javax.swing.JLabel bNuevaPartida;
    private javax.swing.JLabel bPartidaAleatoria;
    private javax.swing.JLabel bRegresar;
    // End of variables declaration//GEN-END:variables

    /**
     * Lanza el primer mapa ( ejecucion modo historia )
     *
     * @return true si puede identificar el nivel , false sino
     */
    public boolean cargarNuevaPartida() {
        int numPartida = GestionMapas.obtenerNumeroMapa(0);

        if (numPartida != -1) {
            return cargarNivel(numPartida);
        }
        return false;

    }

    /**
     * Permite cargar un mapa aleatorio
     *
     * @return true si puede identificar el nivel , false sino
     */
    public boolean cargarMapaAleatorio() {
        Random rng = new Random();
        Integer mapaAleatorio;
        try {
            mapaAleatorio = rng.nextInt(GestionMapas.numMapas());
            System.out.println("Aleatorio? = " + mapaAleatorio);
            return cargarNivel(GestionMapas.obtenerNumeroMapa(mapaAleatorio));
        } catch (Exception e) {
            Logger.getLogger(PrepararPartida.class.getName()).log(Level.SEVERE, "No se logro identificar un mapa aleatorio valido");
            return cargarNivel(1);
        }
    }

    /**
     * Cargar nivel especifico
     *
     * @param nivel nivel a cargar
     * @return true si puede cargar el menu - false sino
     */
    public boolean cargarNivel(int nivel) {
        System.out.println("nivel a cargar  = " + nivel);
        ventanaJuego = new Partida(nivel);
        ventanaJuego.setVisible(true);
        this.setVisible(false);
        return true;
    }

    /**
     * Permite cargar una partida guardada ubicandola en un listado de partidas
     * disponibles.
     */
    private void cargarPartidaGuardada() {
        String[] partidas = GestionMapas.partidasGuardadas();
        System.out.println("partidas = " + partidas.length);
        if (partidas != null && partidas.length > 0) {
            String nombrePartida = (String) JOptionPane.showInputDialog(this, "Seleccione Partida que desea cargar", "Cargar Partida Guardada", JOptionPane.INFORMATION_MESSAGE, null, partidas, this);

            if (nombrePartida != null) {
                //Leer Partida
                String rutaArchivo = TableroControlador.PATH_PARTIDAS + nombrePartida + ".txt";

                String partida = ArchivoControlador.cargarArchivo(rutaArchivo);

                System.out.println("partida = \n" + partida);

                ventanaJuego = new Partida(partida);
                ventanaJuego.setVisible(true);
                this.setVisible(false);
            }

        } else {
            JOptionPane.showMessageDialog(this, "No se ha grabado ninguna partida aun", "Sin partidas que cargar", JOptionPane.INFORMATION_MESSAGE);
        }

    }

    /**
     * Configurar Imagen de Fondo Ventana
     */
    private void asignarFondo() {
        //setContentPane(new JLabel(new ImageIcon(this.getClass().getResource("../Imagenes/Menu/Principal1.png"))));
        imagenFondo = new JLabel();
        imagenFondo.setIcon(new ImageIcon(Principal.class.getResource("../Imagenes/Menu/fondoPartida.png")));
        imagenFondo.setSize(getSize());
        add(imagenFondo);
    }

    /**
     * Devolver a menu principal
     */
    private void regresarMenu() {
        this.setVisible(false);
        Principal menuPrincipal = new Principal();
        menuPrincipal.setVisible(true);
    }

}
