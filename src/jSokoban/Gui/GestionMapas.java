/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jSokoban.Gui;

import com.sun.jmx.snmp.BerDecoder;
import jSokoban.ArchivoControlador;
import jSokoban.TableroControlador;
import java.awt.Color;
import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.ColorUIResource;

/**
 *
 * @author gusta
 */
public class GestionMapas extends javax.swing.JFrame {

    private JLabel imagenFondo;

    public GestionMapas() {
        initComponents();
        cargarListadoMapas();
        setResizable(false);
        setSize(728, 645);
        asignarFondo();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bRegresar = new javax.swing.JLabel();
        cbMapasDisponibles = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        bCrearMapa = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bRegresar.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        bRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jSokoban/Imagenes/Menu/btnRegresar.png"))); // NOI18N
        bRegresar.setToolTipText("Mapas Disponibles");
        bRegresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bRegresarMouseClicked(evt);
            }
        });

        cbMapasDisponibles.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        cbMapasDisponibles.setForeground(new java.awt.Color(0, 102, 0));

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jSokoban/Imagenes/Menu/editar.png"))); // NOI18N
        jLabel2.setToolTipText("Modificar Mapa");

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jSokoban/Imagenes/Menu/btnCargarMapa.png"))); // NOI18N
        jLabel3.setToolTipText("Cargar Mapa");
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        bCrearMapa.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        bCrearMapa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jSokoban/Imagenes/Menu/btnCrearMapa.png"))); // NOI18N
        bCrearMapa.setToolTipText("Crear Mapa");
        bCrearMapa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bCrearMapaMouseClicked(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jSokoban/Imagenes/Menu/eliminar.png"))); // NOI18N
        jLabel5.setToolTipText("Eliminar Mapa");
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(271, 271, 271)
                        .addComponent(bCrearMapa))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(249, 249, 249)
                        .addComponent(cbMapasDisponibles, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(271, 271, 271)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bRegresar)
                            .addComponent(jLabel3))))
                .addContainerGap(153, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(136, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbMapasDisponibles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addComponent(bCrearMapa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGap(12, 12, 12)
                .addComponent(bRegresar)
                .addGap(97, 97, 97))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        cargarArchivoExterno();
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        eliminarMapa();
    }//GEN-LAST:event_jLabel5MouseClicked

    private void bCrearMapaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bCrearMapaMouseClicked
        ConstructorMapas constructor = new ConstructorMapas();
        constructor.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_bCrearMapaMouseClicked

    private void bRegresarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bRegresarMouseClicked
        this.setVisible(false);
        Principal menuPrincipal = new Principal();
        menuPrincipal.setVisible(true);
    }//GEN-LAST:event_bRegresarMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionMapas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionMapas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionMapas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionMapas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionMapas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bCrearMapa;
    private javax.swing.JLabel bRegresar;
    private javax.swing.JComboBox cbMapasDisponibles;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * @return
     */
    public static String[] mapasDisponibles() {
        String[] mapas = null;
        File carpetaMapas = new File(TableroControlador.PATH_MAPAS);
        if (carpetaMapas.exists()) {
            File[] archivosMapa = carpetaMapas.listFiles();
            mapas = new String[archivosMapa.length];
            for (int i = 0; i < mapas.length; i++) {
                if (archivosMapa[i].isFile()) {
                    mapas[i] = archivosMapa[i].getName().replace(".txt", "");
                }
            }

        } else {
            //Lanzar Excepcion
        }

        return mapas;
    }

    /**
     * Obtiene el Numero de Mapa correspondiente al primer Mapa en el Sistema
     *
     * @param pos
     * @return
     */
    public static int obtenerNumeroMapa(int pos) {
        try {
            if (mapasDisponibles() != null) {
                //Eliminar caracteres que no sean numero
                String mapa = mapasDisponibles()[pos].replaceAll("\\D+", "");
                return Integer.parseInt(mapa);
            }
        } catch (NumberFormatException e) {
            System.out.println("No se logro identificar el num del mapa");
        }

        return -1;
    }

    /**
     * Identificar codigo del mapa a guardar
     *
     * @return
     */
    public static int asignarNumeroMapa() {

        String[] mapDispo = mapasDisponibles();

        if (mapDispo != null) {
            int ultimo = obtenerNumeroMapa(mapDispo.length - 1);
            return ultimo + 1;
        }

        return 0;

    }

    public static String[] partidasGuardadas() {
        String[] partidas = null;
        File carpetaPartidas = new File(TableroControlador.PATH_PARTIDAS);
        if (carpetaPartidas.exists()) {
            File[] archivosPartida = carpetaPartidas.listFiles();
            partidas = new String[archivosPartida.length];
            for (int i = 0; i < partidas.length; i++) {
                if (archivosPartida[i].isFile()) {
                    partidas[i] = archivosPartida[i].getName().replace(".txt", "");
                }
            }

        } else {
            //Lanzar Excepcion
        }

        return partidas;
    }

    /**
     * Identifica los mapas que se encuentras instalados
     */
    private void cargarListadoMapas() {
        //Borrar Listado de Mapas que se tienen para evitar repetidos
        cbMapasDisponibles.removeAllItems();

        String[] mapasDisponibles = mapasDisponibles();
        for (String mapaDisponible : mapasDisponibles) {
            cbMapasDisponibles.addItem(mapaDisponible);
        }

    }

    /**
     * Realiza conteno de mapas instalados en el juego
     *
     * @return cantidad de mapas encontrados
     */
    public static int numMapas() {
        int res = 0;
        File carpetaMapas = new File(TableroControlador.PATH_MAPAS);
        if (carpetaMapas.exists()) {
            File[] mapas = carpetaMapas.listFiles();
            for (File mapa : mapas) {
                if (mapa.isFile()) {
                    res++;
                }
            }

        } else {
            //Lanzar Excepcion
        }
        return res;
    }

    /**
     * Cargar Mapa a Carpeta de Mapas del Juego
     */
    private void cargarArchivoExterno() {
        JFileChooser seleccionadorArchivos = new JFileChooser();
        //Que solo permita archivos planos
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        seleccionadorArchivos.setFileFilter(filter);

        seleccionadorArchivos.showOpenDialog(this);

        File abre = seleccionadorArchivos.getSelectedFile();

        if (abre != null) {
            if (ArchivoControlador.transferirMapa(abre.getAbsolutePath())) {
                cargarListadoMapas();
                JOptionPane.showMessageDialog(this, "Mapa Cargado Correctamente", "¡A Jugar! - Mapa Cargado", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No fue posible cargar el mapa, el contenido no parece valido", "Upss - Mapa no Valido", JOptionPane.INFORMATION_MESSAGE);
            }

        }

    }

    public void eliminarMapa() {
        if (cbMapasDisponibles.getSelectedItem() != null) {
            String nombreMapa = cbMapasDisponibles.getSelectedItem().toString();

            nombreMapa = TableroControlador.PATH_MAPAS + nombreMapa + ".txt";
            if (ArchivoControlador.eliminarArchivo(nombreMapa)) {
                JOptionPane.showMessageDialog(this, "Se ha removido el mapa de la lista de mapas disponibles para jugar", "Mapa Eliminado", JOptionPane.INFORMATION_MESSAGE);
                //Obtener de nuevo los campas existentes en carpeta
                cargarListadoMapas();
            } else {
                JOptionPane.showMessageDialog(this, "No fue posible eliminar el mapa, tendra que realizar esta tarea manualmente.\n Diríjase a la ruta " + TableroControlador.PATH_MAPAS + " y suprima el mapa " + cbMapasDisponibles.getSelectedItem().toString() + ".txt", "Upss - Algo ha salido mal", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

    /**
     * Configurar Imagen de Fondo Ventana
     */
    private void asignarFondo() {
        //setContentPane(new JLabel(new ImageIcon(this.getClass().getResource("../Imagenes/Menu/Principal1.png"))));
        imagenFondo = new JLabel();
        imagenFondo.setIcon(new ImageIcon(Principal.class.getResource("../Imagenes/Menu/fondoMapas.png")));
        imagenFondo.setSize(getSize());
        add(imagenFondo);

        UIManager.put("ComboBox.background", new ColorUIResource(UIManager.getColor("TextField.background")));
        UIManager.put("ComboBox.foreground", new ColorUIResource(UIManager.getColor("TextField.foreground")));
        UIManager.put("ComboBox.selectionBackground", new ColorUIResource(Color.GREEN));
        UIManager.put("ComboBox.selectionForeground", new ColorUIResource(Color.WHITE));
    }

}
